1.数据或文件最终都要存储在物理磁盘上。对物理磁盘的访问都是通过设备驱动程序来进行的。而对设备驱动的访问有2种方式：
   *.通过设备驱动本身提供的接口
   *.通过虚拟文件系统(VFS)提供给上层应用程序的接口,VFS提供一种机制，它将各种不同的文件系统整合在一起，并提供统一的应用程序接口供上层的应用程序使用
2.文件权限mode参数
    字符长量值   八进制    含义
    S_ISUID 04000 文件的 (set user-id on execution)位
    S_ISGID 02000 文件的 (set group-id on execution)位、S_ISVTX 01000 文件的sticky 位
    S_IRUSR (S_IREAD) 00400 文件所有者具可读取权限
    S_IWUSR (S_IWRITE)00200 文件所有者具可写入权限
    S_IXUSR (S_IEXEC) 00100 文件所有者具可执行权限
    S_IRGRP 00040 用户组具可读取权限
    S_IWGRP 00020 用户组具可写入权限
    S_IXGRP 00010 用户组具可执行权限
    S_IROTH 00004 其他用户具可读取权限
    S_IWOTH 00002 其他用户具可写入权限
    S_IXOTH 00001 其他用户具可执行权限
3.C语言标准库函数fopen,fclose,fread,fwrite 和fseek 都是对creat,open,close,read,write,lseek等系统调用的封装，可移植性比较好
4.文件描述符是Linux/Unix特有的，是一个非负整数，文件描述符取值范围为0-NR_OPEN （NR_OPEN为255），每一个程序最多只能打开256个文件
5.打开文件方式如下：
O_RDONLY　　只读打开
O_WRONLY　 只写打开
O_RDWR 读写打开
上面三个常量必须指定一个并且只能指定一个，下面一些常量则是可选的：

O_APPEND　　将写入追加到文件的尾端
O_CREAT 若文件不存在，则创建它。使用该选项时，需要第三个参数mode，用来指定新文件的访问权限位
O_EXCL 如果同时指定了O_CREAT，而文件已经存在，则会出错
O_TRUNC 如果此文件存在，而且为只写或读写模式成功打开，则将其长度截短为0
O_NOCTTY 如果pathname指的是终端设备，则不将该设备分配作为此进程的控制终端
O_NONBLOCK 如果pathname指的是一个FIFO文件、块设备文件或字符设备文件，则此选项将文件的本次打开操作和后续的I/O操作设置为非阻塞模式
6.creat()相当于open(const char* pathname,(O_CREAT|O_WRONLY|O_TRUNC)),creat 会覆盖原文件
 creat 只能以只写的方式打开创建的文件，creat无法创建设备文件，设备文件的创建要使用mknod函数
 close 函数调用成功时并不保证数据能全部写回硬盘
 read ,write,lseek 读/写/指针移动 来自 include <unistd.h>

7.dup  dup2  fcntl ioctl
  dup:找到一个最小的描述符，最小的描述符和其参数描述符指向同一个文件
  dup2：把旧的描述符赋值给新的描述符
  fcntl:其可以用来对已打开的文件描述符进行各种控制操作以改变已打开文件的各种属性。
  得到标志值和设置标志值，设置打开方式，获得打开方式。
  ioctl :用来控制特殊设备文件的属性

8.文件锁：文件锁分为共享锁（读锁）和互斥锁（写锁），锁具有不兼容性（其是指的在不同进程上，如果在一个进程上，新锁会取代旧锁）
  建议性锁是这样规定的：每个使用上锁文件的进程都要检查是否有锁存在，当然还得尊重已有的锁。内核和系统总体上都坚持不使用建议性锁，它们依靠程序员遵守这个规定。（Linux默认是采用建议性锁），其对于合作的进程有效，但对于其他不合作的，建议锁并不能阻止。
  强制性锁是由内核执行的。当文件被上锁来进行写入操作时，在锁定该文件的进程释放该锁之前，内核会阻止任何对该文件的读或写访问，每次读或写访问都得检查锁是否存在。

 单个进程在一个字节上只能设置一种锁，新的锁会取代旧的锁，锁的不兼容性规则是针对多个进程的
9.文件属性获取与设置
stat()   fstat()   lstat() 获取文件属性
chown/fchown/lchown 更变所属组
truncate/ftruncate 用于改变文件大小
utime   更改文件的st_time和st_ctime域
int utime(const char *filename, const struct utimbuf *times);
umask 屏蔽字，权限权限
unlink()删除文件
rmdir() 删除目录
remove()封装两者
文件删除如果有进程在使用它，等进程使用完后在删除
目录创建和删除
mkdir()
rmdir()
获取当前目录
getcwd()
get_current_dir_name()  ,如果定义_GNU_SOURCE
getwd() ,如果定义_BSD_SOURCE 或_XOPEN_SOURCE_EXTENDED
设置工作目录
fchdir()
chdir()并不能真正改变，因为其只能改变本进程的，而无法改变其他进程的。

获取目录信息
opendir();打开
readdir();读取
closedir();关闭
DIR *形态的目录流
struct dirent {}结构体
